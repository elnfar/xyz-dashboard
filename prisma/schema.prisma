generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  BILLING
  USER
  TRACKER
  VIEWER
}

enum IssueCategory {
  NEW
  IN_PROGRESS
  DONE
}

enum Idle {
  NOT_WORKING
  ACTIVE
  MEETING
  LUNCH
  BREAK
  FINISHED
}

model Tenant {
  id               String   @id @default(uuid())
  name             String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  stripeCustomerId String?
  expirationDate   DateTime? // NULL -> means no expiration
  inviteKey        String     @unique @default(dbgenerated("replace(cast(gen_random_uuid() as text), '-', '')")) @db.Text
  users            User[]
  projects         Project[]
  issues Issue[]
  teamSize Int @default(0)
  activity Activity[]

}

model User {
  id            String   @id @default(uuid())
  clerkId       String @unique
  profileImage String?
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role       Role       @default(VIEWER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  isOnboarded Boolean @default(false)

  activity Activity[]
  issues IssueAssignment[]
}





model Project {
  id          String        @id @default(uuid()) 
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  industry String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  issues      Issue[]
}
model Issue {x
  id          String        @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    IssueCategory @default(NEW)
  projectId   String?
  project     Project?       @relation(fields: [projectId], references: [id])
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  assignees   IssueAssignment[]
}

model IssueAssignment {
  issueId String
  userId  String
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([issueId, userId])
}


model Activity {
  id          String        @id @default(uuid())
  idle Idle @default(NOT_WORKING)
 
  startTime   DateTime
  endTime     DateTime?


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}